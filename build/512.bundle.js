"use strict";(self.webpackChunkreact_underground=self.webpackChunkreact_underground||[]).push([[512],{6025:function(e,t,r){r.d(t,{Z:function(){return k}});var n=r(4184),o=r.n(n),i=r(7294),a=r(6792),s=r(4680),c=r(9602),f=r(5893);const l=i.forwardRef((({bsPrefix:e,className:t,variant:r,as:n="img",...i},s)=>{const c=(0,a.vE)(e,"card-img");return(0,f.jsx)(n,{ref:s,className:o()(r?`${c}-${r}`:c,t),...i})}));l.displayName="CardImg";var u=l,p=r(9059);const d=i.forwardRef((({bsPrefix:e,className:t,as:r="div",...n},s)=>{const c=(0,a.vE)(e,"card-header"),l=(0,i.useMemo)((()=>({cardHeaderBsPrefix:c})),[c]);return(0,f.jsx)(p.Z.Provider,{value:l,children:(0,f.jsx)(r,{ref:s,...n,className:o()(t,c)})})}));d.displayName="CardHeader";var m=d;const h=(0,c.Z)("h5"),v=(0,c.Z)("h6"),g=(0,s.Z)("card-body"),b=(0,s.Z)("card-title",{Component:h}),y=(0,s.Z)("card-subtitle",{Component:v}),w=(0,s.Z)("card-link",{Component:"a"}),x=(0,s.Z)("card-text",{Component:"p"}),O=(0,s.Z)("card-footer"),E=(0,s.Z)("card-img-overlay"),j=i.forwardRef((({bsPrefix:e,className:t,bg:r,text:n,border:i,body:s,children:c,as:l="div",...u},p)=>{const d=(0,a.vE)(e,"card");return(0,f.jsx)(l,{ref:p,...u,className:o()(t,d,r&&`bg-${r}`,n&&`text-${n}`,i&&`border-${i}`),children:s?(0,f.jsx)(g,{children:c}):c})}));j.displayName="Card",j.defaultProps={body:!1};var k=Object.assign(j,{Img:u,Title:b,Subtitle:y,Body:g,Link:w,Text:x,Header:m,Footer:O,ImgOverlay:E})},3068:function(e,t,r){r.d(t,{Z:function(){return b}});var n=r(4184),o=r.n(n),i=r(7294),a=r(2473),s=r.n(a),c=r(8523),f=r(3535),l=r(6792),u=r(8146),p=r(3716),d=r(7126),m=r(5893);const h=i.forwardRef((({bsPrefix:e,active:t,disabled:r,eventKey:n,className:i,variant:a,action:c,as:f,...h},v)=>{e=(0,l.vE)(e,"list-group-item");const[g,b]=(0,p.v)({key:(0,d.h)(n,h.href),active:t,...h}),y=(0,u.Z)((e=>{if(r)return e.preventDefault(),void e.stopPropagation();g.onClick(e)}));r&&void 0===h.tabIndex&&(h.tabIndex=-1,h["aria-disabled"]=!0);const w=f||(c?h.href?"a":"button":"div");return s()(f||!(!c&&h.href),"`action=false` and `href` should not be used together."),(0,m.jsx)(w,{ref:v,...h,...g,onClick:y,className:o()(i,e,b.isActive&&"active",r&&"disabled",a&&`${e}-${a}`,c&&`${e}-action`)})}));h.displayName="ListGroupItem";var v=h;const g=i.forwardRef(((e,t)=>{const{className:r,bsPrefix:n,variant:i,horizontal:a,numbered:u,as:p="div",...d}=(0,c.Ch)(e,{activeKey:"onSelect"}),h=(0,l.vE)(n,"list-group");let v;return a&&(v=!0===a?"horizontal":`horizontal-${a}`),s()(!(a&&"flush"===i),'`variant="flush"` and `horizontal` should not be used together.'),(0,m.jsx)(f.Z,{ref:t,...d,as:p,className:o()(r,h,i&&`${h}-${i}`,v&&`${h}-${v}`,u&&`${h}-numbered`)})}));g.displayName="ListGroup";var b=Object.assign(g,{Item:v})},6801:function(e,t,r){r.d(t,{Z:function(){return st}});var n=r(424),o=r(7294),i=r(6454),a=r(5088),s=Math.pow(2,31)-1;function c(e,t,r){var n=r-Date.now();e.current=n<=s?setTimeout(t,n):setTimeout((function(){return c(e,t,r)}),s)}function f(){var e=(0,i.Z)(),t=(0,o.useRef)();return(0,a.Z)((function(){return clearTimeout(t.current)})),(0,o.useMemo)((function(){var r=function(){return clearTimeout(t.current)};return{set:function(n,o){void 0===o&&(o=0),e()&&(r(),o<=s?t.current=setTimeout(n,o):c(t,n,Date.now()+o))},clear:r}}),[])}var l=r(2473),u=r.n(l),p=r(8523),d=r(5654),m=r(4184),h=r.n(m),v=r(3935),g=r(2092),b=Object.prototype.hasOwnProperty;function y(e,t,r){for(r of e.keys())if(w(r,t))return r}function w(e,t){var r,n,o;if(e===t)return!0;if(e&&t&&(r=e.constructor)===t.constructor){if(r===Date)return e.getTime()===t.getTime();if(r===RegExp)return e.toString()===t.toString();if(r===Array){if((n=e.length)===t.length)for(;n--&&w(e[n],t[n]););return-1===n}if(r===Set){if(e.size!==t.size)return!1;for(n of e){if((o=n)&&"object"==typeof o&&!(o=y(t,o)))return!1;if(!t.has(o))return!1}return!0}if(r===Map){if(e.size!==t.size)return!1;for(n of e){if((o=n[0])&&"object"==typeof o&&!(o=y(t,o)))return!1;if(!w(n[1],t.get(o)))return!1}return!0}if(r===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(r===DataView){if((n=e.byteLength)===t.byteLength)for(;n--&&e.getInt8(n)===t.getInt8(n););return-1===n}if(ArrayBuffer.isView(e)){if((n=e.byteLength)===t.byteLength)for(;n--&&e[n]===t[n];);return-1===n}if(!r||"object"==typeof e){for(r in n=0,e){if(b.call(e,r)&&++n&&!b.call(t,r))return!1;if(!(r in t)||!w(e[r],t[r]))return!1}return Object.keys(t).length===n}}return e!=e&&t!=t}function x(e){return e.split("-")[0]}function O(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function E(e){return e instanceof O(e).Element||e instanceof Element}function j(e){return e instanceof O(e).HTMLElement||e instanceof HTMLElement}function k(e){return"undefined"!=typeof ShadowRoot&&(e instanceof O(e).ShadowRoot||e instanceof ShadowRoot)}var P=Math.max,C=Math.min,Z=Math.round;function A(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function S(){return!/^((?!chrome|android).)*safari/i.test(A())}function D(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!1);var n=e.getBoundingClientRect(),o=1,i=1;t&&j(e)&&(o=e.offsetWidth>0&&Z(n.width)/e.offsetWidth||1,i=e.offsetHeight>0&&Z(n.height)/e.offsetHeight||1);var a=(E(e)?O(e):window).visualViewport,s=!S()&&r,c=(n.left+(s&&a?a.offsetLeft:0))/o,f=(n.top+(s&&a?a.offsetTop:0))/i,l=n.width/o,u=n.height/i;return{width:l,height:u,top:f,right:c+l,bottom:f+u,left:c,x:c,y:f}}function T(e){var t=D(e),r=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-r)<=1&&(r=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:r,height:n}}function R(e,t){var r=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(r&&k(r)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function L(e){return e?(e.nodeName||"").toLowerCase():null}function M(e){return O(e).getComputedStyle(e)}function N(e){return["table","td","th"].indexOf(L(e))>=0}function B(e){return((E(e)?e.ownerDocument:e.document)||window.document).documentElement}function H(e){return"html"===L(e)?e:e.assignedSlot||e.parentNode||(k(e)?e.host:null)||B(e)}function q(e){return j(e)&&"fixed"!==M(e).position?e.offsetParent:null}function W(e){for(var t=O(e),r=q(e);r&&N(r)&&"static"===M(r).position;)r=q(r);return r&&("html"===L(r)||"body"===L(r)&&"static"===M(r).position)?t:r||function(e){var t=/firefox/i.test(A());if(/Trident/i.test(A())&&j(e)&&"fixed"===M(e).position)return null;var r=H(e);for(k(r)&&(r=r.host);j(r)&&["html","body"].indexOf(L(r))<0;){var n=M(r);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return r;r=r.parentNode}return null}(e)||t}function I(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function $(e,t,r){return P(e,C(t,r))}function F(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function V(e,t){return t.reduce((function(t,r){return t[r]=e,t}),{})}var U="top",_="bottom",z="right",K="left",G="auto",X=[U,_,z,K],Y="start",J="end",Q="viewport",ee="popper",te=X.reduce((function(e,t){return e.concat([t+"-"+Y,t+"-"+J])}),[]),re=[].concat(X,[G]).reduce((function(e,t){return e.concat([t,t+"-"+Y,t+"-"+J])}),[]),ne=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function oe(e){return e.split("-")[1]}var ie={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ae(e){var t,r=e.popper,n=e.popperRect,o=e.placement,i=e.variation,a=e.offsets,s=e.position,c=e.gpuAcceleration,f=e.adaptive,l=e.roundOffsets,u=e.isFixed,p=a.x,d=void 0===p?0:p,m=a.y,h=void 0===m?0:m,v="function"==typeof l?l({x:d,y:h}):{x:d,y:h};d=v.x,h=v.y;var g=a.hasOwnProperty("x"),b=a.hasOwnProperty("y"),y=K,w=U,x=window;if(f){var E=W(r),j="clientHeight",k="clientWidth";E===O(r)&&"static"!==M(E=B(r)).position&&"absolute"===s&&(j="scrollHeight",k="scrollWidth"),(o===U||(o===K||o===z)&&i===J)&&(w=_,h-=(u&&E===x&&x.visualViewport?x.visualViewport.height:E[j])-n.height,h*=c?1:-1),o!==K&&(o!==U&&o!==_||i!==J)||(y=z,d-=(u&&E===x&&x.visualViewport?x.visualViewport.width:E[k])-n.width,d*=c?1:-1)}var P,C=Object.assign({position:s},f&&ie),A=!0===l?function(e){var t=e.x,r=e.y,n=window.devicePixelRatio||1;return{x:Z(t*n)/n||0,y:Z(r*n)/n||0}}({x:d,y:h}):{x:d,y:h};return d=A.x,h=A.y,c?Object.assign({},C,((P={})[w]=b?"0":"",P[y]=g?"0":"",P.transform=(x.devicePixelRatio||1)<=1?"translate("+d+"px, "+h+"px)":"translate3d("+d+"px, "+h+"px, 0)",P)):Object.assign({},C,((t={})[w]=b?h+"px":"",t[y]=g?d+"px":"",t.transform="",t))}var se={passive:!0},ce={left:"right",right:"left",bottom:"top",top:"bottom"};function fe(e){return e.replace(/left|right|bottom|top/g,(function(e){return ce[e]}))}var le={start:"end",end:"start"};function ue(e){return e.replace(/start|end/g,(function(e){return le[e]}))}function pe(e){var t=O(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function de(e){return D(B(e)).left+pe(e).scrollLeft}function me(e){var t=M(e),r=t.overflow,n=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(r+o+n)}function he(e){return["html","body","#document"].indexOf(L(e))>=0?e.ownerDocument.body:j(e)&&me(e)?e:he(H(e))}function ve(e,t){var r;void 0===t&&(t=[]);var n=he(e),o=n===(null==(r=e.ownerDocument)?void 0:r.body),i=O(n),a=o?[i].concat(i.visualViewport||[],me(n)?n:[]):n,s=t.concat(a);return o?s:s.concat(ve(H(a)))}function ge(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function be(e,t,r){return t===Q?ge(function(e,t){var r=O(e),n=B(e),o=r.visualViewport,i=n.clientWidth,a=n.clientHeight,s=0,c=0;if(o){i=o.width,a=o.height;var f=S();(f||!f&&"fixed"===t)&&(s=o.offsetLeft,c=o.offsetTop)}return{width:i,height:a,x:s+de(e),y:c}}(e,r)):E(t)?function(e,t){var r=D(e,!1,"fixed"===t);return r.top=r.top+e.clientTop,r.left=r.left+e.clientLeft,r.bottom=r.top+e.clientHeight,r.right=r.left+e.clientWidth,r.width=e.clientWidth,r.height=e.clientHeight,r.x=r.left,r.y=r.top,r}(t,r):ge(function(e){var t,r=B(e),n=pe(e),o=null==(t=e.ownerDocument)?void 0:t.body,i=P(r.scrollWidth,r.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=P(r.scrollHeight,r.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),s=-n.scrollLeft+de(e),c=-n.scrollTop;return"rtl"===M(o||r).direction&&(s+=P(r.clientWidth,o?o.clientWidth:0)-i),{width:i,height:a,x:s,y:c}}(B(e)))}function ye(e){var t,r=e.reference,n=e.element,o=e.placement,i=o?x(o):null,a=o?oe(o):null,s=r.x+r.width/2-n.width/2,c=r.y+r.height/2-n.height/2;switch(i){case U:t={x:s,y:r.y-n.height};break;case _:t={x:s,y:r.y+r.height};break;case z:t={x:r.x+r.width,y:c};break;case K:t={x:r.x-n.width,y:c};break;default:t={x:r.x,y:r.y}}var f=i?I(i):null;if(null!=f){var l="y"===f?"height":"width";switch(a){case Y:t[f]=t[f]-(r[l]/2-n[l]/2);break;case J:t[f]=t[f]+(r[l]/2-n[l]/2)}}return t}function we(e,t){void 0===t&&(t={});var r=t,n=r.placement,o=void 0===n?e.placement:n,i=r.strategy,a=void 0===i?e.strategy:i,s=r.boundary,c=void 0===s?"clippingParents":s,f=r.rootBoundary,l=void 0===f?Q:f,u=r.elementContext,p=void 0===u?ee:u,d=r.altBoundary,m=void 0!==d&&d,h=r.padding,v=void 0===h?0:h,g=F("number"!=typeof v?v:V(v,X)),b=p===ee?"reference":ee,y=e.rects.popper,w=e.elements[m?b:p],x=function(e,t,r,n){var o="clippingParents"===t?function(e){var t=ve(H(e)),r=["absolute","fixed"].indexOf(M(e).position)>=0&&j(e)?W(e):e;return E(r)?t.filter((function(e){return E(e)&&R(e,r)&&"body"!==L(e)})):[]}(e):[].concat(t),i=[].concat(o,[r]),a=i[0],s=i.reduce((function(t,r){var o=be(e,r,n);return t.top=P(o.top,t.top),t.right=C(o.right,t.right),t.bottom=C(o.bottom,t.bottom),t.left=P(o.left,t.left),t}),be(e,a,n));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(E(w)?w:w.contextElement||B(e.elements.popper),c,l,a),O=D(e.elements.reference),k=ye({reference:O,element:y,strategy:"absolute",placement:o}),Z=ge(Object.assign({},y,k)),A=p===ee?Z:O,S={top:x.top-A.top+g.top,bottom:A.bottom-x.bottom+g.bottom,left:x.left-A.left+g.left,right:A.right-x.right+g.right},T=e.modifiersData.offset;if(p===ee&&T){var N=T[o];Object.keys(S).forEach((function(e){var t=[z,_].indexOf(e)>=0?1:-1,r=[U,_].indexOf(e)>=0?"y":"x";S[e]+=N[r]*t}))}return S}function xe(e,t,r){return void 0===r&&(r={x:0,y:0}),{top:e.top-t.height-r.y,right:e.right-t.width+r.x,bottom:e.bottom-t.height+r.y,left:e.left-t.width-r.x}}function Oe(e){return[U,z,_,K].some((function(t){return e[t]>=0}))}function Ee(e,t,r){void 0===r&&(r=!1);var n,o,i=j(t),a=j(t)&&function(e){var t=e.getBoundingClientRect(),r=Z(t.width)/e.offsetWidth||1,n=Z(t.height)/e.offsetHeight||1;return 1!==r||1!==n}(t),s=B(t),c=D(e,a,r),f={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(i||!i&&!r)&&(("body"!==L(t)||me(s))&&(f=(n=t)!==O(n)&&j(n)?{scrollLeft:(o=n).scrollLeft,scrollTop:o.scrollTop}:pe(n)),j(t)?((l=D(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):s&&(l.x=de(s))),{x:c.left+f.scrollLeft-l.x,y:c.top+f.scrollTop-l.y,width:c.width,height:c.height}}function je(e){var t=new Map,r=new Set,n=[];function o(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!r.has(e)){var n=t.get(e);n&&o(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){r.has(e.name)||o(e)})),n}function ke(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return[].concat(r).reduce((function(e,t){return e.replace(/%s/,t)}),e)}var Pe='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',Ce=["name","enabled","phase","fn","effect","requires","options"],Ze="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",Ae={placement:"bottom",modifiers:[],strategy:"absolute"};function Se(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}const De=function(e){void 0===e&&(e={});var t=e,r=t.defaultModifiers,n=void 0===r?[]:r,o=t.defaultOptions,i=void 0===o?Ae:o;return function(e,t,r){void 0===r&&(r=i);var o,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ae,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],f=!1,l={state:s,setOptions:function(r){var o="function"==typeof r?r(s.options):r;u(),s.options=Object.assign({},i,s.options,o),s.scrollParents={reference:E(e)?ve(e):e.contextElement?ve(e.contextElement):[],popper:ve(t)};var a,f,p=function(e){var t=je(e);return ne.reduce((function(e,r){return e.concat(t.filter((function(e){return e.phase===r})))}),[])}((a=[].concat(n,s.options.modifiers),f=a.reduce((function(e,t){var r=e[t.name];return e[t.name]=r?Object.assign({},r,t,{options:Object.assign({},r.options,t.options),data:Object.assign({},r.data,t.data)}):t,e}),{}),Object.keys(f).map((function(e){return f[e]}))));s.orderedModifiers=p.filter((function(e){return e.enabled})),function(e){e.forEach((function(t){[].concat(Object.keys(t),Ce).filter((function(e,t,r){return r.indexOf(e)===t})).forEach((function(r){switch(r){case"name":"string"!=typeof t.name&&console.error(ke(Pe,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error(ke(Pe,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));break;case"phase":ne.indexOf(t.phase)<0&&console.error(ke(Pe,t.name,'"phase"',"either "+ne.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error(ke(Pe,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":null!=t.effect&&"function"!=typeof t.effect&&console.error(ke(Pe,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":null==t.requires||Array.isArray(t.requires)||console.error(ke(Pe,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error(ke(Pe,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+Ce.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+r+'" was provided.')}t.requires&&t.requires.forEach((function(r){null==e.find((function(e){return e.name===r}))&&console.error(ke('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),r,r))}))}))}))}((d=[].concat(p,s.options.modifiers),m=function(e){return e.name},h=new Set,d.filter((function(e){var t=m(e);if(!h.has(t))return h.add(t),!0})))),x(s.options.placement)===G&&(s.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var d,m,h,v=M(t);return[v.marginTop,v.marginRight,v.marginBottom,v.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),s.orderedModifiers.forEach((function(e){var t=e.name,r=e.options,n=void 0===r?{}:r,o=e.effect;if("function"==typeof o){var i=o({state:s,name:t,instance:l,options:n});c.push(i||function(){})}})),l.update()},forceUpdate:function(){if(!f){var e=s.elements,t=e.reference,r=e.popper;if(Se(t,r)){s.rects={reference:Ee(t,W(r),"fixed"===s.options.strategy),popper:T(r)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0,o=0;o<s.orderedModifiers.length;o++){if((n+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==s.reset){var i=s.orderedModifiers[o],a=i.fn,c=i.options,u=void 0===c?{}:c,p=i.name;"function"==typeof a&&(s=a({state:s,options:u,name:p,instance:l})||s)}else s.reset=!1,o=-1}}else console.error(Ze)}},update:(o=function(){return new Promise((function(e){l.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(o())}))}))),a}),destroy:function(){u(),f=!0}};if(!Se(e,t))return console.error(Ze),l;function u(){c.forEach((function(e){return e()})),c=[]}return l.setOptions(r).then((function(e){!f&&r.onFirstUpdate&&r.onFirstUpdate(e)})),l}}({defaultModifiers:[{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,r=e.name,n=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=we(t,{elementContext:"reference"}),s=we(t,{altBoundary:!0}),c=xe(a,n),f=xe(s,o,i),l=Oe(c),u=Oe(f);t.modifiersData[r]={referenceClippingOffsets:c,popperEscapeOffsets:f,isReferenceHidden:l,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":u})}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,r=e.name;t.modifiersData[r]=ye({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,r=e.options,n=r.gpuAcceleration,o=void 0===n||n,i=r.adaptive,a=void 0===i||i,s=r.roundOffsets,c=void 0===s||s,f=M(t.elements.popper).transitionProperty||"";a&&["transform","top","right","bottom","left"].some((function(e){return f.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var l={placement:x(t.placement),variation:oe(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ae(Object.assign({},l,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ae(Object.assign({},l,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,r=e.instance,n=e.options,o=n.scroll,i=void 0===o||o,a=n.resize,s=void 0===a||a,c=O(t.elements.popper),f=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&f.forEach((function(e){e.addEventListener("scroll",r.update,se)})),s&&c.addEventListener("resize",r.update,se),function(){i&&f.forEach((function(e){e.removeEventListener("scroll",r.update,se)})),s&&c.removeEventListener("resize",r.update,se)}},data:{}},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,r=e.options,n=e.name,o=r.offset,i=void 0===o?[0,0]:o,a=re.reduce((function(e,r){return e[r]=function(e,t,r){var n=x(e),o=[K,U].indexOf(n)>=0?-1:1,i="function"==typeof r?r(Object.assign({},t,{placement:e})):r,a=i[0],s=i[1];return a=a||0,s=(s||0)*o,[K,z].indexOf(n)>=0?{x:s,y:a}:{x:a,y:s}}(r,t.rects,i),e}),{}),s=a[t.placement],c=s.x,f=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=f),t.modifiersData[n]=a}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,r=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var o=r.mainAxis,i=void 0===o||o,a=r.altAxis,s=void 0===a||a,c=r.fallbackPlacements,f=r.padding,l=r.boundary,u=r.rootBoundary,p=r.altBoundary,d=r.flipVariations,m=void 0===d||d,h=r.allowedAutoPlacements,v=t.options.placement,g=x(v),b=c||(g!==v&&m?function(e){if(x(e)===G)return[];var t=fe(e);return[ue(e),t,ue(t)]}(v):[fe(v)]),y=[v].concat(b).reduce((function(e,r){return e.concat(x(r)===G?function(e,t){void 0===t&&(t={});var r=t,n=r.placement,o=r.boundary,i=r.rootBoundary,a=r.padding,s=r.flipVariations,c=r.allowedAutoPlacements,f=void 0===c?re:c,l=oe(n),u=l?s?te:te.filter((function(e){return oe(e)===l})):X,p=u.filter((function(e){return f.indexOf(e)>=0}));0===p.length&&(p=u,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var d=p.reduce((function(t,r){return t[r]=we(e,{placement:r,boundary:o,rootBoundary:i,padding:a})[x(r)],t}),{});return Object.keys(d).sort((function(e,t){return d[e]-d[t]}))}(t,{placement:r,boundary:l,rootBoundary:u,padding:f,flipVariations:m,allowedAutoPlacements:h}):r)}),[]),w=t.rects.reference,O=t.rects.popper,E=new Map,j=!0,k=y[0],P=0;P<y.length;P++){var C=y[P],Z=x(C),A=oe(C)===Y,S=[U,_].indexOf(Z)>=0,D=S?"width":"height",T=we(t,{placement:C,boundary:l,rootBoundary:u,altBoundary:p,padding:f}),R=S?A?z:K:A?_:U;w[D]>O[D]&&(R=fe(R));var L=fe(R),M=[];if(i&&M.push(T[Z]<=0),s&&M.push(T[R]<=0,T[L]<=0),M.every((function(e){return e}))){k=C,j=!1;break}E.set(C,M)}if(j)for(var N=function(e){var t=y.find((function(t){var r=E.get(t);if(r)return r.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},B=m?3:1;B>0&&"break"!==N(B);B--);t.placement!==k&&(t.modifiersData[n]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,r=e.options,n=e.name,o=r.mainAxis,i=void 0===o||o,a=r.altAxis,s=void 0!==a&&a,c=r.boundary,f=r.rootBoundary,l=r.altBoundary,u=r.padding,p=r.tether,d=void 0===p||p,m=r.tetherOffset,h=void 0===m?0:m,v=we(t,{boundary:c,rootBoundary:f,padding:u,altBoundary:l}),g=x(t.placement),b=oe(t.placement),y=!b,w=I(g),O="x"===w?"y":"x",E=t.modifiersData.popperOffsets,j=t.rects.reference,k=t.rects.popper,Z="function"==typeof h?h(Object.assign({},t.rects,{placement:t.placement})):h,A="number"==typeof Z?{mainAxis:Z,altAxis:Z}:Object.assign({mainAxis:0,altAxis:0},Z),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,D={x:0,y:0};if(E){if(i){var R,L="y"===w?U:K,M="y"===w?_:z,N="y"===w?"height":"width",B=E[w],H=B+v[L],q=B-v[M],F=d?-k[N]/2:0,V=b===Y?j[N]:k[N],G=b===Y?-k[N]:-j[N],X=t.elements.arrow,J=d&&X?T(X):{width:0,height:0},Q=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},ee=Q[L],te=Q[M],re=$(0,j[N],J[N]),ne=y?j[N]/2-F-re-ee-A.mainAxis:V-re-ee-A.mainAxis,ie=y?-j[N]/2+F+re+te+A.mainAxis:G+re+te+A.mainAxis,ae=t.elements.arrow&&W(t.elements.arrow),se=ae?"y"===w?ae.clientTop||0:ae.clientLeft||0:0,ce=null!=(R=null==S?void 0:S[w])?R:0,fe=B+ie-ce,le=$(d?C(H,B+ne-ce-se):H,B,d?P(q,fe):q);E[w]=le,D[w]=le-B}if(s){var ue,pe="x"===w?U:K,de="x"===w?_:z,me=E[O],he="y"===O?"height":"width",ve=me+v[pe],ge=me-v[de],be=-1!==[U,K].indexOf(g),ye=null!=(ue=null==S?void 0:S[O])?ue:0,xe=be?ve:me-j[he]-k[he]-ye+A.altAxis,Oe=be?me+j[he]+k[he]-ye-A.altAxis:ge,Ee=d&&be?function(e,t,r){var n=$(e,t,r);return n>r?r:n}(xe,me,Oe):$(d?xe:ve,me,d?Oe:ge);E[O]=Ee,D[O]=Ee-me}t.modifiersData[n]=D}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,r=e.state,n=e.name,o=e.options,i=r.elements.arrow,a=r.modifiersData.popperOffsets,s=x(r.placement),c=I(s),f=[K,z].indexOf(s)>=0?"height":"width";if(i&&a){var l=function(e,t){return F("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:V(e,X))}(o.padding,r),u=T(i),p="y"===c?U:K,d="y"===c?_:z,m=r.rects.reference[f]+r.rects.reference[c]-a[c]-r.rects.popper[f],h=a[c]-r.rects.reference[c],v=W(i),g=v?"y"===c?v.clientHeight||0:v.clientWidth||0:0,b=m/2-h/2,y=l[p],w=g-u[f]-l[d],O=g/2-u[f]/2+b,E=$(y,O,w),j=c;r.modifiersData[n]=((t={})[j]=E,t.centerOffset=E-O,t)}},effect:function(e){var t=e.state,r=e.options.element,n=void 0===r?"[data-popper-arrow]":r;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&(j(n)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),R(t.elements.popper,n)?t.elements.arrow=n:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}]}),Te=["enabled","placement","strategy","modifiers"],Re={name:"applyStyles",enabled:!1,phase:"afterWrite",fn:()=>{}},Le={name:"ariaDescribedBy",enabled:!0,phase:"afterWrite",effect:({state:e})=>()=>{const{reference:t,popper:r}=e.elements;if("removeAttribute"in t){const e=(t.getAttribute("aria-describedby")||"").split(",").filter((e=>e.trim()!==r.id));e.length?t.setAttribute("aria-describedby",e.join(",")):t.removeAttribute("aria-describedby")}},fn:({state:e})=>{var t;const{popper:r,reference:n}=e.elements,o=null==(t=r.getAttribute("role"))?void 0:t.toLowerCase();if(r.id&&"tooltip"===o&&"setAttribute"in n){const e=n.getAttribute("aria-describedby");if(e&&-1!==e.split(",").indexOf(r.id))return;n.setAttribute("aria-describedby",e?`${e},${r.id}`:r.id)}}},Me=[];var Ne=function(e,t,r={}){let{enabled:n=!0,placement:a="bottom",strategy:s="absolute",modifiers:c=Me}=r,f=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(r,Te);const l=(0,o.useRef)(c),u=(0,o.useRef)(),p=(0,o.useCallback)((()=>{var e;null==(e=u.current)||e.update()}),[]),d=(0,o.useCallback)((()=>{var e;null==(e=u.current)||e.forceUpdate()}),[]),[m,h]=(b=(0,o.useState)({placement:a,update:p,forceUpdate:d,attributes:{},styles:{popper:{},arrow:{}}}),y=(0,i.Z)(),[b[0],(0,o.useCallback)((function(e){if(y())return b[1](e)}),[y,b[1]])]),v=(0,o.useMemo)((()=>({name:"updateStateModifier",enabled:!0,phase:"write",requires:["computeStyles"],fn:({state:e})=>{const t={},r={};Object.keys(e.elements).forEach((n=>{t[n]=e.styles[n],r[n]=e.attributes[n]})),h({state:e,styles:t,attributes:r,update:p,forceUpdate:d,placement:e.placement})}})),[p,d,h]),g=(0,o.useMemo)((()=>(w(l.current,c)||(l.current=c),l.current)),[c]);var b,y;return(0,o.useEffect)((()=>{u.current&&n&&u.current.setOptions({placement:a,strategy:s,modifiers:[...g,v,Re]})}),[s,a,v,n,g]),(0,o.useEffect)((()=>{if(n&&null!=e&&null!=t)return u.current=De(e,t,Object.assign({},f,{placement:a,strategy:s,modifiers:[...g,Le,v]})),()=>{null!=u.current&&(u.current.destroy(),u.current=void 0,h((e=>Object.assign({},e,{attributes:{},styles:{popper:{}}}))))}}),[n,e,t]),m},Be=r(8076),He=r(7216),qe=r(8146);const We=()=>{},Ie=e=>e&&("current"in e?e.current:e),$e={click:"mousedown",mouseup:"mousedown",pointerup:"pointerdown"};const Fe=()=>{};var Ve=function(e,t,{disabled:r,clickTrigger:i}={}){const a=t||Fe;!function(e,t=We,{disabled:r,clickTrigger:i="click"}={}){const a=(0,o.useRef)(!1),s=(0,o.useRef)(!1),c=(0,o.useCallback)((t=>{const r=Ie(e);var o;u()(!!r,"ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node"),a.current=!r||!!((o=t).metaKey||o.altKey||o.ctrlKey||o.shiftKey)||!function(e){return 0===e.button}(t)||!!(0,n.Z)(r,t.target)||s.current,s.current=!1}),[e]),f=(0,qe.Z)((t=>{const r=Ie(e);r&&(0,n.Z)(r,t.target)&&(s.current=!0)})),l=(0,qe.Z)((e=>{a.current||t(e)}));(0,o.useEffect)((()=>{if(r||null==e)return;const t=(0,He.Z)(Ie(e));let n=(t.defaultView||window).event,o=null;$e[i]&&(o=(0,Be.Z)(t,$e[i],f,!0));const a=(0,Be.Z)(t,i,c,!0),s=(0,Be.Z)(t,i,(e=>{e!==n?l(e):n=void 0}));let u=[];return"ontouchstart"in t.documentElement&&(u=[].slice.call(t.body.children).map((e=>(0,Be.Z)(e,"mousemove",We)))),()=>{null==o||o(),a(),s(),u.forEach((e=>e()))}}),[e,r,i,c,f,l])}(e,a,{disabled:r,clickTrigger:i});const s=(0,qe.Z)((e=>{27===e.keyCode&&a(e)}));(0,o.useEffect)((()=>{if(r||null==e)return;const t=(0,He.Z)(Ie(e));let n=(t.defaultView||window).event;const o=(0,Be.Z)(t,"keyup",(e=>{e!==n?s(e):n=void 0}));return()=>{o()}}),[e,r,s])},Ue=r(4194);function _e(e={}){return Array.isArray(e)?e:Object.keys(e).map((t=>(e[t].name=t,e[t])))}var ze=r(5893);const Ke=o.forwardRef(((e,t)=>{const{flip:r,offset:n,placement:i,containerPadding:a,popperConfig:s={},transition:c}=e,[f,l]=(0,g.Z)(),[u,p]=(0,g.Z)(),m=(0,d.Z)(l,t),h=(0,Ue.Z)(e.container),b=(0,Ue.Z)(e.target),[y,w]=(0,o.useState)(!e.show),x=Ne(b,f,function({enabled:e,enableEvents:t,placement:r,flip:n,offset:o,fixed:i,containerPadding:a,arrowElement:s,popperConfig:c={}}){var f,l,u,p,d;const m=function(e){const t={};return Array.isArray(e)?(null==e||e.forEach((e=>{t[e.name]=e})),t):e||t}(c.modifiers);return Object.assign({},c,{placement:r,enabled:e,strategy:i?"fixed":c.strategy,modifiers:_e(Object.assign({},m,{eventListeners:{enabled:t,options:null==(f=m.eventListeners)?void 0:f.options},preventOverflow:Object.assign({},m.preventOverflow,{options:a?Object.assign({padding:a},null==(l=m.preventOverflow)?void 0:l.options):null==(u=m.preventOverflow)?void 0:u.options}),offset:{options:Object.assign({offset:o},null==(p=m.offset)?void 0:p.options)},arrow:Object.assign({},m.arrow,{enabled:!!s,options:Object.assign({},null==(d=m.arrow)?void 0:d.options,{element:s})}),flip:Object.assign({enabled:!!n},m.flip)}))})}({placement:i,enableEvents:!!e.show,containerPadding:a||5,flip:r,offset:n,arrowElement:u,popperConfig:s}));e.show?y&&w(!1):e.transition||y||w(!0);const O=(...t)=>{w(!0),e.onExited&&e.onExited(...t)},E=e.show||c&&!y;if(Ve(f,e.onHide,{disabled:!e.rootClose||e.rootCloseDisabled,clickTrigger:e.rootCloseEvent}),!E)return null;let j=e.children(Object.assign({},x.attributes.popper,{style:x.styles.popper,ref:m}),{popper:x,placement:i,show:!!e.show,arrowProps:Object.assign({},x.attributes.arrow,{style:x.styles.arrow,ref:p})});if(c){const{onExit:t,onExiting:r,onEnter:n,onEntering:o,onEntered:i}=e;j=(0,ze.jsx)(c,{in:e.show,appear:!0,onExit:t,onExiting:r,onExited:O,onEnter:n,onEntering:o,onEntered:i,children:j})}return h?v.createPortal(j,h):null}));Ke.displayName="Overlay";var Ge=Ke,Xe=r(9585),Ye=r(1132),Je=r(6792),Qe=r(6650),et=r(1068),tt=r(8285);const rt={transition:et.Z,rootClose:!1,show:!1,placement:"top"},nt=o.forwardRef((({children:e,transition:t,popperConfig:r={},...n},i)=>{const a=(0,o.useRef)({}),[s,c]=(0,g.Z)(),[f,l]=function(e){const t=(0,o.useRef)(null),r=(0,Je.vE)(void 0,"popover"),n=(0,o.useMemo)((()=>({name:"offset",options:{offset:()=>t.current&&(0,Ye.Z)(t.current,r)?e||Qe.Z.POPPER_OFFSET:e||[0,0]}})),[e,r]);return[t,[n]]}(n.offset),u=(0,d.Z)(i,f),p=!0===t?et.Z:t||void 0,m=(0,qe.Z)((e=>{c(e),null==r||null==r.onFirstUpdate||r.onFirstUpdate(e)}));return(0,Xe.Z)((()=>{s&&(null==a.current.scheduleUpdate||a.current.scheduleUpdate())}),[s]),(0,ze.jsx)(Ge,{...n,ref:u,popperConfig:{...r,modifiers:l.concat(r.modifiers||[]),onFirstUpdate:m},transition:p,children:(r,{arrowProps:n,popper:i,show:s})=>{var c,f;!function(e,t){const{ref:r}=e,{ref:n}=t;e.ref=r.__wrapped||(r.__wrapped=e=>r((0,tt.Z)(e))),t.ref=n.__wrapped||(n.__wrapped=e=>n((0,tt.Z)(e)))}(r,n);const l=null==i?void 0:i.placement,u=Object.assign(a.current,{state:null==i?void 0:i.state,scheduleUpdate:null==i?void 0:i.update,placement:l,outOfBoundaries:(null==i||null==(c=i.state)||null==(f=c.modifiersData.hide)?void 0:f.isReferenceHidden)||!1});return"function"==typeof e?e({...r,placement:l,show:s,...!t&&s&&{className:"show"},popper:u,arrowProps:n}):o.cloneElement(e,{...r,placement:l,arrowProps:n,popper:u,className:h()(e.props.className,!t&&s&&"show"),style:{...e.props.style,...r.style}})}})}));nt.displayName="Overlay",nt.defaultProps=rt;var ot=nt;function it(e,t,r){const[o]=t,i=o.currentTarget,a=o.relatedTarget||o.nativeEvent[r];a&&a===i||(0,n.Z)(i,a)||e(...t)}function at({trigger:e,overlay:t,children:r,popperConfig:n={},show:i,defaultShow:a=!1,onToggle:s,delay:c,placement:l,flip:m=l&&-1!==l.indexOf("auto"),...h}){const v=(0,o.useRef)(null),g=(0,d.Z)(v,r.ref),b=f(),y=(0,o.useRef)(""),[w,x]=(0,p.$c)(i,a,s),O=function(e){return e&&"object"==typeof e?e:{show:e,hide:e}}(c),{onFocus:E,onBlur:j,onClick:k}="function"!=typeof r?o.Children.only(r).props:{},P=(0,o.useCallback)((()=>{b.clear(),y.current="show",O.show?b.set((()=>{"show"===y.current&&x(!0)}),O.show):x(!0)}),[O.show,x,b]),C=(0,o.useCallback)((()=>{b.clear(),y.current="hide",O.hide?b.set((()=>{"hide"===y.current&&x(!1)}),O.hide):x(!1)}),[O.hide,x,b]),Z=(0,o.useCallback)(((...e)=>{P(),null==E||E(...e)}),[P,E]),A=(0,o.useCallback)(((...e)=>{C(),null==j||j(...e)}),[C,j]),S=(0,o.useCallback)(((...e)=>{x(!w),null==k||k(...e)}),[k,x,w]),D=(0,o.useCallback)(((...e)=>{it(P,e,"fromElement")}),[P]),T=(0,o.useCallback)(((...e)=>{it(C,e,"toElement")}),[C]),R=null==e?[]:[].concat(e),L={ref:e=>{g((0,tt.Z)(e))}};return-1!==R.indexOf("click")&&(L.onClick=S),-1!==R.indexOf("focus")&&(L.onFocus=Z,L.onBlur=A),-1!==R.indexOf("hover")&&(u()(R.length>1,'[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.'),L.onMouseOver=D,L.onMouseOut=T),(0,ze.jsxs)(ze.Fragment,{children:["function"==typeof r?r(L):(0,o.cloneElement)(r,L),(0,ze.jsx)(ot,{...h,show:w,onHide:C,flip:m,placement:l,popperConfig:n,target:v.current,children:t})]})}at.defaultProps={defaultShow:!1,trigger:["hover","focus"]};var st=at},6650:function(e,t,r){r.d(t,{Z:function(){return d}});var n=r(4184),o=r.n(n),i=r(7294),a=r(6792),s=r(4680),c=(0,s.Z)("popover-header"),f=(0,s.Z)("popover-body");class l extends i.Component{}var u=r(5893);const p=i.forwardRef((({bsPrefix:e,placement:t,className:r,style:n,children:i,body:s,arrowProps:c,popper:l,show:p,...d},m)=>{const h=(0,a.vE)(e,"popover"),v=(0,a.SC)(),[g]=(null==t?void 0:t.split("-"))||[],b=function(e,t){let r=e;return"left"===e?r=t?"end":"start":"right"===e&&(r=t?"start":"end"),r}(g,v);return(0,u.jsxs)("div",{ref:m,role:"tooltip",style:n,"x-placement":g,className:o()(r,h,g&&`bs-popover-${b}`),...d,children:[(0,u.jsx)("div",{className:"popover-arrow",...c}),s?(0,u.jsx)(f,{children:i}):i]})}));p.defaultProps={placement:"right"};var d=Object.assign(p,{Header:c,Body:f,POPPER_OFFSET:[0,8]})},2473:function(e){var t,r=function(e,t){var r=arguments.length;t=new Array(r>1?r-1:0);for(var n=1;n<r;n++)t[n-1]=arguments[n];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return t[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};t=function(e,t,n){var o=arguments.length;n=new Array(o>2?o-2:0);for(var i=2;i<o;i++)n[i-2]=arguments[i];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");e||r.apply(null,[t].concat(n))},e.exports=t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,