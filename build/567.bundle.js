"use strict";(self.webpackChunkreact_underground=self.webpackChunkreact_underground||[]).push([[567],{5692:function(e,t,n){n.d(t,{Z:function(){return k}});var r=n(4184),o=n.n(r),i=n(7294),a=n(6792),s=n(4680),c=n(9602),l=n(5893);const f=i.forwardRef((({bsPrefix:e,className:t,variant:n,as:r="img",...i},s)=>{const c=(0,a.vE)(e,"card-img");return(0,l.jsx)(r,{ref:s,className:o()(n?`${c}-${n}`:c,t),...i})}));f.displayName="CardImg";var u=f;const d=i.createContext(null);d.displayName="CardHeaderContext";var p=d;const m=i.forwardRef((({bsPrefix:e,className:t,as:n="div",...r},s)=>{const c=(0,a.vE)(e,"card-header"),f=(0,i.useMemo)((()=>({cardHeaderBsPrefix:c})),[c]);return(0,l.jsx)(p.Provider,{value:f,children:(0,l.jsx)(n,{ref:s,...r,className:o()(t,c)})})}));m.displayName="CardHeader";var h=m;const v=(0,c.Z)("h5"),g=(0,c.Z)("h6"),b=(0,s.Z)("card-body"),y=(0,s.Z)("card-title",{Component:v}),w=(0,s.Z)("card-subtitle",{Component:g}),x=(0,s.Z)("card-link",{Component:"a"}),O=(0,s.Z)("card-text",{Component:"p"}),E=(0,s.Z)("card-footer"),j=(0,s.Z)("card-img-overlay"),C=i.forwardRef((({bsPrefix:e,className:t,bg:n,text:r,border:i,body:s,children:c,as:f="div",...u},d)=>{const p=(0,a.vE)(e,"card");return(0,l.jsx)(f,{ref:d,...u,className:o()(t,p,n&&`bg-${n}`,r&&`text-${r}`,i&&`border-${i}`),children:s?(0,l.jsx)(b,{children:c}):c})}));C.displayName="Card",C.defaultProps={body:!1};var k=Object.assign(C,{Img:u,Title:y,Subtitle:w,Body:b,Link:x,Text:O,Header:h,Footer:E,ImgOverlay:j})},9548:function(e,t,n){n.d(t,{Z:function(){return R}});var r=n(4184),o=n.n(r),i=n(7294),a=n(2473),s=n.n(a),c=n(8523),l=n(930),f=n(5654);const u=i.createContext(null);u.displayName="NavContext";var d=u,p=n(7126),m=i.createContext(null),h=n(2747),v=n(6895),g=n(861),b=n(5893);const y=["as","active","eventKey"];function w({key:e,onClick:t,active:n,id:r,role:o,disabled:a}){const s=(0,i.useContext)(p.Z),c=(0,i.useContext)(d),l=(0,i.useContext)(m);let f=n;const u={role:o};if(c){o||"tablist"!==c.role||(u.role="tab");const t=c.getControllerId(null!=e?e:null),i=c.getControlledId(null!=e?e:null);u[(0,h.PB)("event-key")]=e,u.id=t||r,f=null==n&&null!=e?c.activeKey===e:n,!f&&(null!=l&&l.unmountOnExit||null!=l&&l.mountOnEnter)||(u["aria-controls"]=i)}return"tab"===u.role&&(u["aria-selected"]=f,f||(u.tabIndex=-1),a&&(u.tabIndex=-1,u["aria-disabled"]=!0)),u.onClick=(0,v.Z)((n=>{a||(null==t||t(n),null!=e&&s&&!n.isPropagationStopped()&&s(e,n))})),[u,{isActive:f}]}const x=i.forwardRef(((e,t)=>{let{as:n=g.ZP,active:r,eventKey:o}=e,i=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,y);const[a,s]=w(Object.assign({key:(0,p.h)(o,i.href),active:r},i));return a[(0,h.PB)("active")]=s.isActive,(0,b.jsx)(n,Object.assign({},i,a,{ref:t}))}));x.displayName="NavItem";var O=x;const E=["as","onSelect","activeKey","role","onKeyDown"],j=()=>{},C=(0,h.PB)("event-key"),k=i.forwardRef(((e,t)=>{let{as:n="div",onSelect:r,activeKey:o,role:a,onKeyDown:s}=e,c=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,E);const u=(0,i.useReducer)((function(e){return!e}),!1)[1],v=(0,i.useRef)(!1),g=(0,i.useContext)(p.Z),y=(0,i.useContext)(m);let w,x;y&&(a=a||"tablist",o=y.activeKey,w=y.getControlledId,x=y.getControllerId);const O=(0,i.useRef)(null),k=e=>{const t=O.current;if(!t)return null;const n=(0,l.Z)(t,`[${C}]:not([aria-disabled=true])`),r=t.querySelector("[aria-selected=true]");if(!r||r!==document.activeElement)return null;const o=n.indexOf(r);if(-1===o)return null;let i=o+e;return i>=n.length&&(i=0),i<0&&(i=n.length-1),n[i]},P=(e,t)=>{null!=e&&(null==r||r(e,t),null==g||g(e,t))};(0,i.useEffect)((()=>{if(O.current&&v.current){const e=O.current.querySelector(`[${C}][aria-selected=true]`);null==e||e.focus()}v.current=!1}));const A=(0,f.Z)(t,O);return(0,b.jsx)(p.Z.Provider,{value:P,children:(0,b.jsx)(d.Provider,{value:{role:a,activeKey:(0,p.h)(o),getControlledId:w||j,getControllerId:x||j},children:(0,b.jsx)(n,Object.assign({},c,{onKeyDown:e=>{if(null==s||s(e),!y)return;let t;switch(e.key){case"ArrowLeft":case"ArrowUp":t=k(-1);break;case"ArrowRight":case"ArrowDown":t=k(1);break;default:return}t&&(e.preventDefault(),P(t.dataset[(0,h.$F)("EventKey")]||null,e),v.current=!0,u())},ref:A,role:a}))})})}));k.displayName="Nav";var P=Object.assign(k,{Item:O}),A=n(6792);const S=i.forwardRef((({bsPrefix:e,active:t,disabled:n,eventKey:r,className:i,variant:a,action:c,as:l,...f},u)=>{e=(0,A.vE)(e,"list-group-item");const[d,m]=w({key:(0,p.h)(r,f.href),active:t,...f}),h=(0,v.Z)((e=>{if(n)return e.preventDefault(),void e.stopPropagation();d.onClick(e)}));n&&void 0===f.tabIndex&&(f.tabIndex=-1,f["aria-disabled"]=!0);const g=l||(c?f.href?"a":"button":"div");return s()(l||!(!c&&f.href),"`action=false` and `href` should not be used together."),(0,b.jsx)(g,{ref:u,...f,...d,onClick:h,className:o()(i,e,m.isActive&&"active",n&&"disabled",a&&`${e}-${a}`,c&&`${e}-action`)})}));S.displayName="ListGroupItem";var Z=S;const D=i.forwardRef(((e,t)=>{const{className:n,bsPrefix:r,variant:i,horizontal:a,numbered:l,as:f="div",...u}=(0,c.Ch)(e,{activeKey:"onSelect"}),d=(0,A.vE)(r,"list-group");let p;return a&&(p=!0===a?"horizontal":`horizontal-${a}`),s()(!(a&&"flush"===i),'`variant="flush"` and `horizontal` should not be used together.'),(0,b.jsx)(P,{ref:t,...u,as:f,className:o()(n,d,i&&`${d}-${i}`,p&&`${d}-${p}`,l&&`${d}-numbered`)})}));D.displayName="ListGroup";var R=Object.assign(D,{Item:Z})},4945:function(e,t,n){n.d(t,{Z:function(){return st}});var r=n(424),o=n(7294),i=n(6454),a=n(5088),s=Math.pow(2,31)-1;function c(e,t,n){var r=n-Date.now();e.current=r<=s?setTimeout(t,r):setTimeout((function(){return c(e,t,n)}),s)}function l(){var e=(0,i.Z)(),t=(0,o.useRef)();return(0,a.Z)((function(){return clearTimeout(t.current)})),(0,o.useMemo)((function(){var n=function(){return clearTimeout(t.current)};return{set:function(r,o){void 0===o&&(o=0),e()&&(n(),o<=s?t.current=setTimeout(r,o):c(t,r,Date.now()+o))},clear:n}}),[])}var f=n(2473),u=n.n(f),d=n(8523),p=n(5654),m=n(4184),h=n.n(m),v=n(3935);function g(){return(0,o.useState)(null)}var b=Object.prototype.hasOwnProperty;function y(e,t,n){for(n of e.keys())if(w(n,t))return n}function w(e,t){var n,r,o;if(e===t)return!0;if(e&&t&&(n=e.constructor)===t.constructor){if(n===Date)return e.getTime()===t.getTime();if(n===RegExp)return e.toString()===t.toString();if(n===Array){if((r=e.length)===t.length)for(;r--&&w(e[r],t[r]););return-1===r}if(n===Set){if(e.size!==t.size)return!1;for(r of e){if((o=r)&&"object"==typeof o&&!(o=y(t,o)))return!1;if(!t.has(o))return!1}return!0}if(n===Map){if(e.size!==t.size)return!1;for(r of e){if((o=r[0])&&"object"==typeof o&&!(o=y(t,o)))return!1;if(!w(r[1],t.get(o)))return!1}return!0}if(n===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(n===DataView){if((r=e.byteLength)===t.byteLength)for(;r--&&e.getInt8(r)===t.getInt8(r););return-1===r}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===t.byteLength)for(;r--&&e[r]===t[r];);return-1===r}if(!n||"object"==typeof e){for(n in r=0,e){if(b.call(e,n)&&++r&&!b.call(t,n))return!1;if(!(n in t)||!w(e[n],t[n]))return!1}return Object.keys(t).length===r}}return e!=e&&t!=t}function x(e){return e.split("-")[0]}function O(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function E(e){return e instanceof O(e).Element||e instanceof Element}function j(e){return e instanceof O(e).HTMLElement||e instanceof HTMLElement}function C(e){return"undefined"!=typeof ShadowRoot&&(e instanceof O(e).ShadowRoot||e instanceof ShadowRoot)}var k=Math.max,P=Math.min,A=Math.round;function S(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function Z(){return!/^((?!chrome|android).)*safari/i.test(S())}function D(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&j(e)&&(o=e.offsetWidth>0&&A(r.width)/e.offsetWidth||1,i=e.offsetHeight>0&&A(r.height)/e.offsetHeight||1);var a=(E(e)?O(e):window).visualViewport,s=!Z()&&n,c=(r.left+(s&&a?a.offsetLeft:0))/o,l=(r.top+(s&&a?a.offsetTop:0))/i,f=r.width/o,u=r.height/i;return{width:f,height:u,top:l,right:c+f,bottom:l+u,left:c,x:c,y:l}}function R(e){var t=D(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function T(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&C(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function N(e){return e?(e.nodeName||"").toLowerCase():null}function L(e){return O(e).getComputedStyle(e)}function M(e){return["table","td","th"].indexOf(N(e))>=0}function B(e){return((E(e)?e.ownerDocument:e.document)||window.document).documentElement}function I(e){return"html"===N(e)?e:e.assignedSlot||e.parentNode||(C(e)?e.host:null)||B(e)}function q(e){return j(e)&&"fixed"!==L(e).position?e.offsetParent:null}function H(e){for(var t=O(e),n=q(e);n&&M(n)&&"static"===L(n).position;)n=q(n);return n&&("html"===N(n)||"body"===N(n)&&"static"===L(n).position)?t:n||function(e){var t=/firefox/i.test(S());if(/Trident/i.test(S())&&j(e)&&"fixed"===L(e).position)return null;var n=I(e);for(C(n)&&(n=n.host);j(n)&&["html","body"].indexOf(N(n))<0;){var r=L(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}function W(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function $(e,t,n){return k(e,P(t,n))}function F(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function K(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}var U="top",V="bottom",_="right",z="left",G="auto",X=[U,V,_,z],Y="start",J="end",Q="viewport",ee="popper",te=X.reduce((function(e,t){return e.concat([t+"-"+Y,t+"-"+J])}),[]),ne=[].concat(X,[G]).reduce((function(e,t){return e.concat([t,t+"-"+Y,t+"-"+J])}),[]),re=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function oe(e){return e.split("-")[1]}var ie={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ae(e){var t,n=e.popper,r=e.popperRect,o=e.placement,i=e.variation,a=e.offsets,s=e.position,c=e.gpuAcceleration,l=e.adaptive,f=e.roundOffsets,u=e.isFixed,d=a.x,p=void 0===d?0:d,m=a.y,h=void 0===m?0:m,v="function"==typeof f?f({x:p,y:h}):{x:p,y:h};p=v.x,h=v.y;var g=a.hasOwnProperty("x"),b=a.hasOwnProperty("y"),y=z,w=U,x=window;if(l){var E=H(n),j="clientHeight",C="clientWidth";E===O(n)&&"static"!==L(E=B(n)).position&&"absolute"===s&&(j="scrollHeight",C="scrollWidth"),(o===U||(o===z||o===_)&&i===J)&&(w=V,h-=(u&&E===x&&x.visualViewport?x.visualViewport.height:E[j])-r.height,h*=c?1:-1),o!==z&&(o!==U&&o!==V||i!==J)||(y=_,p-=(u&&E===x&&x.visualViewport?x.visualViewport.width:E[C])-r.width,p*=c?1:-1)}var k,P=Object.assign({position:s},l&&ie),S=!0===f?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:A(t*r)/r||0,y:A(n*r)/r||0}}({x:p,y:h}):{x:p,y:h};return p=S.x,h=S.y,c?Object.assign({},P,((k={})[w]=b?"0":"",k[y]=g?"0":"",k.transform=(x.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",k)):Object.assign({},P,((t={})[w]=b?h+"px":"",t[y]=g?p+"px":"",t.transform="",t))}var se={passive:!0},ce={left:"right",right:"left",bottom:"top",top:"bottom"};function le(e){return e.replace(/left|right|bottom|top/g,(function(e){return ce[e]}))}var fe={start:"end",end:"start"};function ue(e){return e.replace(/start|end/g,(function(e){return fe[e]}))}function de(e){var t=O(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function pe(e){return D(B(e)).left+de(e).scrollLeft}function me(e){var t=L(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function he(e){return["html","body","#document"].indexOf(N(e))>=0?e.ownerDocument.body:j(e)&&me(e)?e:he(I(e))}function ve(e,t){var n;void 0===t&&(t=[]);var r=he(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),i=O(r),a=o?[i].concat(i.visualViewport||[],me(r)?r:[]):r,s=t.concat(a);return o?s:s.concat(ve(I(a)))}function ge(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function be(e,t,n){return t===Q?ge(function(e,t){var n=O(e),r=B(e),o=n.visualViewport,i=r.clientWidth,a=r.clientHeight,s=0,c=0;if(o){i=o.width,a=o.height;var l=Z();(l||!l&&"fixed"===t)&&(s=o.offsetLeft,c=o.offsetTop)}return{width:i,height:a,x:s+pe(e),y:c}}(e,n)):E(t)?function(e,t){var n=D(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):ge(function(e){var t,n=B(e),r=de(e),o=null==(t=e.ownerDocument)?void 0:t.body,i=k(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=k(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),s=-r.scrollLeft+pe(e),c=-r.scrollTop;return"rtl"===L(o||n).direction&&(s+=k(n.clientWidth,o?o.clientWidth:0)-i),{width:i,height:a,x:s,y:c}}(B(e)))}function ye(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?x(o):null,a=o?oe(o):null,s=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case U:t={x:s,y:n.y-r.height};break;case V:t={x:s,y:n.y+n.height};break;case _:t={x:n.x+n.width,y:c};break;case z:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var l=i?W(i):null;if(null!=l){var f="y"===l?"height":"width";switch(a){case Y:t[l]=t[l]-(n[f]/2-r[f]/2);break;case J:t[l]=t[l]+(n[f]/2-r[f]/2)}}return t}function we(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=void 0===r?e.placement:r,i=n.strategy,a=void 0===i?e.strategy:i,s=n.boundary,c=void 0===s?"clippingParents":s,l=n.rootBoundary,f=void 0===l?Q:l,u=n.elementContext,d=void 0===u?ee:u,p=n.altBoundary,m=void 0!==p&&p,h=n.padding,v=void 0===h?0:h,g=F("number"!=typeof v?v:K(v,X)),b=d===ee?"reference":ee,y=e.rects.popper,w=e.elements[m?b:d],x=function(e,t,n,r){var o="clippingParents"===t?function(e){var t=ve(I(e)),n=["absolute","fixed"].indexOf(L(e).position)>=0&&j(e)?H(e):e;return E(n)?t.filter((function(e){return E(e)&&T(e,n)&&"body"!==N(e)})):[]}(e):[].concat(t),i=[].concat(o,[n]),a=i[0],s=i.reduce((function(t,n){var o=be(e,n,r);return t.top=k(o.top,t.top),t.right=P(o.right,t.right),t.bottom=P(o.bottom,t.bottom),t.left=k(o.left,t.left),t}),be(e,a,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(E(w)?w:w.contextElement||B(e.elements.popper),c,f,a),O=D(e.elements.reference),C=ye({reference:O,element:y,strategy:"absolute",placement:o}),A=ge(Object.assign({},y,C)),S=d===ee?A:O,Z={top:x.top-S.top+g.top,bottom:S.bottom-x.bottom+g.bottom,left:x.left-S.left+g.left,right:S.right-x.right+g.right},R=e.modifiersData.offset;if(d===ee&&R){var M=R[o];Object.keys(Z).forEach((function(e){var t=[_,V].indexOf(e)>=0?1:-1,n=[U,V].indexOf(e)>=0?"y":"x";Z[e]+=M[n]*t}))}return Z}function xe(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Oe(e){return[U,_,V,z].some((function(t){return e[t]>=0}))}function Ee(e,t,n){void 0===n&&(n=!1);var r,o,i=j(t),a=j(t)&&function(e){var t=e.getBoundingClientRect(),n=A(t.width)/e.offsetWidth||1,r=A(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),s=B(t),c=D(e,a,n),l={scrollLeft:0,scrollTop:0},f={x:0,y:0};return(i||!i&&!n)&&(("body"!==N(t)||me(s))&&(l=(r=t)!==O(r)&&j(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:de(r)),j(t)?((f=D(t,!0)).x+=t.clientLeft,f.y+=t.clientTop):s&&(f.x=pe(s))),{x:c.left+l.scrollLeft-f.x,y:c.top+l.scrollTop-f.y,width:c.width,height:c.height}}function je(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}function Ce(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce((function(e,t){return e.replace(/%s/,t)}),e)}var ke='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',Pe=["name","enabled","phase","fn","effect","requires","options"],Ae="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",Se={placement:"bottom",modifiers:[],strategy:"absolute"};function Ze(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}const De=function(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,i=void 0===o?Se:o;return function(e,t,n){void 0===n&&(n=i);var o,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Se,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],l=!1,f={state:s,setOptions:function(n){var o="function"==typeof n?n(s.options):n;u(),s.options=Object.assign({},i,s.options,o),s.scrollParents={reference:E(e)?ve(e):e.contextElement?ve(e.contextElement):[],popper:ve(t)};var a,l,d=function(e){var t=je(e);return re.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(r,s.options.modifiers),l=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));s.orderedModifiers=d.filter((function(e){return e.enabled})),function(e){e.forEach((function(t){[].concat(Object.keys(t),Pe).filter((function(e,t,n){return n.indexOf(e)===t})).forEach((function(n){switch(n){case"name":"string"!=typeof t.name&&console.error(Ce(ke,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error(Ce(ke,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));break;case"phase":re.indexOf(t.phase)<0&&console.error(Ce(ke,t.name,'"phase"',"either "+re.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error(Ce(ke,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":null!=t.effect&&"function"!=typeof t.effect&&console.error(Ce(ke,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":null==t.requires||Array.isArray(t.requires)||console.error(Ce(ke,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error(Ce(ke,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+Pe.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+n+'" was provided.')}t.requires&&t.requires.forEach((function(n){null==e.find((function(e){return e.name===n}))&&console.error(Ce('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),n,n))}))}))}))}((p=[].concat(d,s.options.modifiers),m=function(e){return e.name},h=new Set,p.filter((function(e){var t=m(e);if(!h.has(t))return h.add(t),!0})))),x(s.options.placement)===G&&(s.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var p,m,h,v=L(t);return[v.marginTop,v.marginRight,v.marginBottom,v.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:s,name:t,instance:f,options:r});c.push(i||function(){})}})),f.update()},forceUpdate:function(){if(!l){var e=s.elements,t=e.reference,n=e.popper;if(Ze(t,n)){s.rects={reference:Ee(t,H(n),"fixed"===s.options.strategy),popper:R(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0,o=0;o<s.orderedModifiers.length;o++){if((r+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==s.reset){var i=s.orderedModifiers[o],a=i.fn,c=i.options,u=void 0===c?{}:c,d=i.name;"function"==typeof a&&(s=a({state:s,options:u,name:d,instance:f})||s)}else s.reset=!1,o=-1}}else console.error(Ae)}},update:(o=function(){return new Promise((function(e){f.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(o())}))}))),a}),destroy:function(){u(),l=!0}};if(!Ze(e,t))return console.error(Ae),f;function u(){c.forEach((function(e){return e()})),c=[]}return f.setOptions(n).then((function(e){!l&&n.onFirstUpdate&&n.onFirstUpdate(e)})),f}}({defaultModifiers:[{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=we(t,{elementContext:"reference"}),s=we(t,{altBoundary:!0}),c=xe(a,r),l=xe(s,o,i),f=Oe(c),u=Oe(l);t.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:l,isReferenceHidden:f,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":u})}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=ye({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,s=n.roundOffsets,c=void 0===s||s,l=L(t.elements.popper).transitionProperty||"";a&&["transform","top","right","bottom","left"].some((function(e){return l.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var f={placement:x(t.placement),variation:oe(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ae(Object.assign({},f,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ae(Object.assign({},f,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,a=r.resize,s=void 0===a||a,c=O(t.elements.popper),l=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&l.forEach((function(e){e.addEventListener("scroll",n.update,se)})),s&&c.addEventListener("resize",n.update,se),function(){i&&l.forEach((function(e){e.removeEventListener("scroll",n.update,se)})),s&&c.removeEventListener("resize",n.update,se)}},data:{}},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,i=void 0===o?[0,0]:o,a=ne.reduce((function(e,n){return e[n]=function(e,t,n){var r=x(e),o=[z,U].indexOf(r)>=0?-1:1,i="function"==typeof n?n(Object.assign({},t,{placement:e})):n,a=i[0],s=i[1];return a=a||0,s=(s||0)*o,[z,_].indexOf(r)>=0?{x:s,y:a}:{x:a,y:s}}(n,t.rects,i),e}),{}),s=a[t.placement],c=s.x,l=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=l),t.modifiersData[r]=a}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,i=void 0===o||o,a=n.altAxis,s=void 0===a||a,c=n.fallbackPlacements,l=n.padding,f=n.boundary,u=n.rootBoundary,d=n.altBoundary,p=n.flipVariations,m=void 0===p||p,h=n.allowedAutoPlacements,v=t.options.placement,g=x(v),b=c||(g!==v&&m?function(e){if(x(e)===G)return[];var t=le(e);return[ue(e),t,ue(t)]}(v):[le(v)]),y=[v].concat(b).reduce((function(e,n){return e.concat(x(n)===G?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,i=n.rootBoundary,a=n.padding,s=n.flipVariations,c=n.allowedAutoPlacements,l=void 0===c?ne:c,f=oe(r),u=f?s?te:te.filter((function(e){return oe(e)===f})):X,d=u.filter((function(e){return l.indexOf(e)>=0}));0===d.length&&(d=u,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var p=d.reduce((function(t,n){return t[n]=we(e,{placement:n,boundary:o,rootBoundary:i,padding:a})[x(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:n,boundary:f,rootBoundary:u,padding:l,flipVariations:m,allowedAutoPlacements:h}):n)}),[]),w=t.rects.reference,O=t.rects.popper,E=new Map,j=!0,C=y[0],k=0;k<y.length;k++){var P=y[k],A=x(P),S=oe(P)===Y,Z=[U,V].indexOf(A)>=0,D=Z?"width":"height",R=we(t,{placement:P,boundary:f,rootBoundary:u,altBoundary:d,padding:l}),T=Z?S?_:z:S?V:U;w[D]>O[D]&&(T=le(T));var N=le(T),L=[];if(i&&L.push(R[A]<=0),s&&L.push(R[T]<=0,R[N]<=0),L.every((function(e){return e}))){C=P,j=!1;break}E.set(P,L)}if(j)for(var M=function(e){var t=y.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},B=m?3:1;B>0&&"break"!==M(B);B--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,i=void 0===o||o,a=n.altAxis,s=void 0!==a&&a,c=n.boundary,l=n.rootBoundary,f=n.altBoundary,u=n.padding,d=n.tether,p=void 0===d||d,m=n.tetherOffset,h=void 0===m?0:m,v=we(t,{boundary:c,rootBoundary:l,padding:u,altBoundary:f}),g=x(t.placement),b=oe(t.placement),y=!b,w=W(g),O="x"===w?"y":"x",E=t.modifiersData.popperOffsets,j=t.rects.reference,C=t.rects.popper,A="function"==typeof h?h(Object.assign({},t.rects,{placement:t.placement})):h,S="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),Z=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,D={x:0,y:0};if(E){if(i){var T,N="y"===w?U:z,L="y"===w?V:_,M="y"===w?"height":"width",B=E[w],I=B+v[N],q=B-v[L],F=p?-C[M]/2:0,K=b===Y?j[M]:C[M],G=b===Y?-C[M]:-j[M],X=t.elements.arrow,J=p&&X?R(X):{width:0,height:0},Q=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},ee=Q[N],te=Q[L],ne=$(0,j[M],J[M]),re=y?j[M]/2-F-ne-ee-S.mainAxis:K-ne-ee-S.mainAxis,ie=y?-j[M]/2+F+ne+te+S.mainAxis:G+ne+te+S.mainAxis,ae=t.elements.arrow&&H(t.elements.arrow),se=ae?"y"===w?ae.clientTop||0:ae.clientLeft||0:0,ce=null!=(T=null==Z?void 0:Z[w])?T:0,le=B+ie-ce,fe=$(p?P(I,B+re-ce-se):I,B,p?k(q,le):q);E[w]=fe,D[w]=fe-B}if(s){var ue,de="x"===w?U:z,pe="x"===w?V:_,me=E[O],he="y"===O?"height":"width",ve=me+v[de],ge=me-v[pe],be=-1!==[U,z].indexOf(g),ye=null!=(ue=null==Z?void 0:Z[O])?ue:0,xe=be?ve:me-j[he]-C[he]-ye+S.altAxis,Oe=be?me+j[he]+C[he]-ye-S.altAxis:ge,Ee=p&&be?function(e,t,n){var r=$(e,t,n);return r>n?n:r}(xe,me,Oe):$(p?xe:ve,me,p?Oe:ge);E[O]=Ee,D[O]=Ee-me}t.modifiersData[r]=D}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,o=e.options,i=n.elements.arrow,a=n.modifiersData.popperOffsets,s=x(n.placement),c=W(s),l=[z,_].indexOf(s)>=0?"height":"width";if(i&&a){var f=function(e,t){return F("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:K(e,X))}(o.padding,n),u=R(i),d="y"===c?U:z,p="y"===c?V:_,m=n.rects.reference[l]+n.rects.reference[c]-a[c]-n.rects.popper[l],h=a[c]-n.rects.reference[c],v=H(i),g=v?"y"===c?v.clientHeight||0:v.clientWidth||0:0,b=m/2-h/2,y=f[d],w=g-u[l]-f[p],O=g/2-u[l]/2+b,E=$(y,O,w),j=c;n.modifiersData[r]=((t={})[j]=E,t.centerOffset=E-O,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&(j(r)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),T(t.elements.popper,r)?t.elements.arrow=r:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}]}),Re=["enabled","placement","strategy","modifiers"],Te={name:"applyStyles",enabled:!1,phase:"afterWrite",fn:()=>{}},Ne={name:"ariaDescribedBy",enabled:!0,phase:"afterWrite",effect:({state:e})=>()=>{const{reference:t,popper:n}=e.elements;if("removeAttribute"in t){const e=(t.getAttribute("aria-describedby")||"").split(",").filter((e=>e.trim()!==n.id));e.length?t.setAttribute("aria-describedby",e.join(",")):t.removeAttribute("aria-describedby")}},fn:({state:e})=>{var t;const{popper:n,reference:r}=e.elements,o=null==(t=n.getAttribute("role"))?void 0:t.toLowerCase();if(n.id&&"tooltip"===o&&"setAttribute"in r){const e=r.getAttribute("aria-describedby");if(e&&-1!==e.split(",").indexOf(n.id))return;r.setAttribute("aria-describedby",e?`${e},${n.id}`:n.id)}}},Le=[];var Me=function(e,t,n={}){let{enabled:r=!0,placement:a="bottom",strategy:s="absolute",modifiers:c=Le}=n,l=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,Re);const f=(0,o.useRef)(c),u=(0,o.useRef)(),d=(0,o.useCallback)((()=>{var e;null==(e=u.current)||e.update()}),[]),p=(0,o.useCallback)((()=>{var e;null==(e=u.current)||e.forceUpdate()}),[]),[m,h]=(b=(0,o.useState)({placement:a,update:d,forceUpdate:p,attributes:{},styles:{popper:{},arrow:{}}}),y=(0,i.Z)(),[b[0],(0,o.useCallback)((function(e){if(y())return b[1](e)}),[y,b[1]])]),v=(0,o.useMemo)((()=>({name:"updateStateModifier",enabled:!0,phase:"write",requires:["computeStyles"],fn:({state:e})=>{const t={},n={};Object.keys(e.elements).forEach((r=>{t[r]=e.styles[r],n[r]=e.attributes[r]})),h({state:e,styles:t,attributes:n,update:d,forceUpdate:p,placement:e.placement})}})),[d,p,h]),g=(0,o.useMemo)((()=>(w(f.current,c)||(f.current=c),f.current)),[c]);var b,y;return(0,o.useEffect)((()=>{u.current&&r&&u.current.setOptions({placement:a,strategy:s,modifiers:[...g,v,Te]})}),[s,a,v,r,g]),(0,o.useEffect)((()=>{if(r&&null!=e&&null!=t)return u.current=De(e,t,Object.assign({},l,{placement:a,strategy:s,modifiers:[...g,Ne,v]})),()=>{null!=u.current&&(u.current.destroy(),u.current=void 0,h((e=>Object.assign({},e,{attributes:{},styles:{popper:{}}}))))}}),[r,e,t]),m},Be=n(8076),Ie=n(7216),qe=n(6895);const He=()=>{},We=e=>e&&("current"in e?e.current:e),$e={click:"mousedown",mouseup:"mousedown",pointerup:"pointerdown"};const Fe=()=>{};var Ke=function(e,t,{disabled:n,clickTrigger:i}={}){const a=t||Fe;!function(e,t=He,{disabled:n,clickTrigger:i="click"}={}){const a=(0,o.useRef)(!1),s=(0,o.useRef)(!1),c=(0,o.useCallback)((t=>{const n=We(e);var o;u()(!!n,"ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node"),a.current=!n||!!((o=t).metaKey||o.altKey||o.ctrlKey||o.shiftKey)||!function(e){return 0===e.button}(t)||!!(0,r.Z)(n,t.target)||s.current,s.current=!1}),[e]),l=(0,qe.Z)((t=>{const n=We(e);n&&(0,r.Z)(n,t.target)&&(s.current=!0)})),f=(0,qe.Z)((e=>{a.current||t(e)}));(0,o.useEffect)((()=>{if(n||null==e)return;const t=(0,Ie.Z)(We(e));let r=(t.defaultView||window).event,o=null;$e[i]&&(o=(0,Be.Z)(t,$e[i],l,!0));const a=(0,Be.Z)(t,i,c,!0),s=(0,Be.Z)(t,i,(e=>{e!==r?f(e):r=void 0}));let u=[];return"ontouchstart"in t.documentElement&&(u=[].slice.call(t.body.children).map((e=>(0,Be.Z)(e,"mousemove",He)))),()=>{null==o||o(),a(),s(),u.forEach((e=>e()))}}),[e,n,i,c,l,f])}(e,a,{disabled:n,clickTrigger:i});const s=(0,qe.Z)((e=>{27===e.keyCode&&a(e)}));(0,o.useEffect)((()=>{if(n||null==e)return;const t=(0,Ie.Z)(We(e));let r=(t.defaultView||window).event;const o=(0,Be.Z)(t,"keyup",(e=>{e!==r?s(e):r=void 0}));return()=>{o()}}),[e,n,s])},Ue=n(4194);function Ve(e={}){return Array.isArray(e)?e:Object.keys(e).map((t=>(e[t].name=t,e[t])))}var _e=n(5893);const ze=o.forwardRef(((e,t)=>{const{flip:n,offset:r,placement:i,containerPadding:a,popperConfig:s={},transition:c}=e,[l,f]=g(),[u,d]=g(),m=(0,p.Z)(f,t),h=(0,Ue.Z)(e.container),b=(0,Ue.Z)(e.target),[y,w]=(0,o.useState)(!e.show),x=Me(b,l,function({enabled:e,enableEvents:t,placement:n,flip:r,offset:o,fixed:i,containerPadding:a,arrowElement:s,popperConfig:c={}}){var l,f,u,d,p;const m=function(e){const t={};return Array.isArray(e)?(null==e||e.forEach((e=>{t[e.name]=e})),t):e||t}(c.modifiers);return Object.assign({},c,{placement:n,enabled:e,strategy:i?"fixed":c.strategy,modifiers:Ve(Object.assign({},m,{eventListeners:{enabled:t,options:null==(l=m.eventListeners)?void 0:l.options},preventOverflow:Object.assign({},m.preventOverflow,{options:a?Object.assign({padding:a},null==(f=m.preventOverflow)?void 0:f.options):null==(u=m.preventOverflow)?void 0:u.options}),offset:{options:Object.assign({offset:o},null==(d=m.offset)?void 0:d.options)},arrow:Object.assign({},m.arrow,{enabled:!!s,options:Object.assign({},null==(p=m.arrow)?void 0:p.options,{element:s})}),flip:Object.assign({enabled:!!r},m.flip)}))})}({placement:i,enableEvents:!!e.show,containerPadding:a||5,flip:n,offset:r,arrowElement:u,popperConfig:s}));e.show?y&&w(!1):e.transition||y||w(!0);const O=(...t)=>{w(!0),e.onExited&&e.onExited(...t)},E=e.show||c&&!y;if(Ke(l,e.onHide,{disabled:!e.rootClose||e.rootCloseDisabled,clickTrigger:e.rootCloseEvent}),!E)return null;let j=e.children(Object.assign({},x.attributes.popper,{style:x.styles.popper,ref:m}),{popper:x,placement:i,show:!!e.show,arrowProps:Object.assign({},x.attributes.arrow,{style:x.styles.arrow,ref:d})});if(c){const{onExit:t,onExiting:n,onEnter:r,onEntering:o,onEntered:i}=e;j=(0,_e.jsx)(c,{in:e.show,appear:!0,onExit:t,onExiting:n,onExited:O,onEnter:r,onEntering:o,onEntered:i,children:j})}return h?v.createPortal(j,h):null}));ze.displayName="Overlay";var Ge=ze,Xe=n(9585),Ye=n(1132),Je=n(6792),Qe=n(6650),et=n(1068),tt=n(8285);const nt={transition:et.Z,rootClose:!1,show:!1,placement:"top"},rt=o.forwardRef((({children:e,transition:t,popperConfig:n={},...r},i)=>{const a=(0,o.useRef)({}),[s,c]=g(),[l,f]=function(e){const t=(0,o.useRef)(null),n=(0,Je.vE)(void 0,"popover"),r=(0,o.useMemo)((()=>({name:"offset",options:{offset:()=>t.current&&(0,Ye.Z)(t.current,n)?e||Qe.Z.POPPER_OFFSET:e||[0,0]}})),[e,n]);return[t,[r]]}(r.offset),u=(0,p.Z)(i,l),d=!0===t?et.Z:t||void 0,m=(0,qe.Z)((e=>{c(e),null==n||null==n.onFirstUpdate||n.onFirstUpdate(e)}));return(0,Xe.Z)((()=>{s&&(null==a.current.scheduleUpdate||a.current.scheduleUpdate())}),[s]),(0,_e.jsx)(Ge,{...r,ref:u,popperConfig:{...n,modifiers:f.concat(n.modifiers||[]),onFirstUpdate:m},transition:d,children:(n,{arrowProps:r,popper:i,show:s})=>{var c,l;!function(e,t){const{ref:n}=e,{ref:r}=t;e.ref=n.__wrapped||(n.__wrapped=e=>n((0,tt.Z)(e))),t.ref=r.__wrapped||(r.__wrapped=e=>r((0,tt.Z)(e)))}(n,r);const f=null==i?void 0:i.placement,u=Object.assign(a.current,{state:null==i?void 0:i.state,scheduleUpdate:null==i?void 0:i.update,placement:f,outOfBoundaries:(null==i||null==(c=i.state)||null==(l=c.modifiersData.hide)?void 0:l.isReferenceHidden)||!1});return"function"==typeof e?e({...n,placement:f,show:s,...!t&&s&&{className:"show"},popper:u,arrowProps:r}):o.cloneElement(e,{...n,placement:f,arrowProps:r,popper:u,className:h()(e.props.className,!t&&s&&"show"),style:{...e.props.style,...n.style}})}})}));rt.displayName="Overlay",rt.defaultProps=nt;var ot=rt;function it(e,t,n){const[o]=t,i=o.currentTarget,a=o.relatedTarget||o.nativeEvent[n];a&&a===i||(0,r.Z)(i,a)||e(...t)}function at({trigger:e,overlay:t,children:n,popperConfig:r={},show:i,defaultShow:a=!1,onToggle:s,delay:c,placement:f,flip:m=f&&-1!==f.indexOf("auto"),...h}){const v=(0,o.useRef)(null),g=(0,p.Z)(v,n.ref),b=l(),y=(0,o.useRef)(""),[w,x]=(0,d.$c)(i,a,s),O=function(e){return e&&"object"==typeof e?e:{show:e,hide:e}}(c),{onFocus:E,onBlur:j,onClick:C}="function"!=typeof n?o.Children.only(n).props:{},k=(0,o.useCallback)((()=>{b.clear(),y.current="show",O.show?b.set((()=>{"show"===y.current&&x(!0)}),O.show):x(!0)}),[O.show,x,b]),P=(0,o.useCallback)((()=>{b.clear(),y.current="hide",O.hide?b.set((()=>{"hide"===y.current&&x(!1)}),O.hide):x(!1)}),[O.hide,x,b]),A=(0,o.useCallback)(((...e)=>{k(),null==E||E(...e)}),[k,E]),S=(0,o.useCallback)(((...e)=>{P(),null==j||j(...e)}),[P,j]),Z=(0,o.useCallback)(((...e)=>{x(!w),null==C||C(...e)}),[C,x,w]),D=(0,o.useCallback)(((...e)=>{it(k,e,"fromElement")}),[k]),R=(0,o.useCallback)(((...e)=>{it(P,e,"toElement")}),[P]),T=null==e?[]:[].concat(e),N={ref:e=>{g((0,tt.Z)(e))}};return-1!==T.indexOf("click")&&(N.onClick=Z),-1!==T.indexOf("focus")&&(N.onFocus=A,N.onBlur=S),-1!==T.indexOf("hover")&&(u()(T.length>1,'[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.'),N.onMouseOver=D,N.onMouseOut=R),(0,_e.jsxs)(_e.Fragment,{children:["function"==typeof n?n(N):(0,o.cloneElement)(n,N),(0,_e.jsx)(ot,{...h,show:w,onHide:P,flip:m,placement:f,popperConfig:r,target:v.current,children:t})]})}at.defaultProps={defaultShow:!1,trigger:["hover","focus"]};var st=at},6650:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(4184),o=n.n(r),i=n(7294),a=n(6792),s=n(4680),c=(0,s.Z)("popover-header"),l=(0,s.Z)("popover-body");class f extends i.Component{}var u=n(5893);const d=i.forwardRef((({bsPrefix:e,placement:t,className:n,style:r,children:i,body:s,arrowProps:c,popper:f,show:d,...p},m)=>{const h=(0,a.vE)(e,"popover"),v=(0,a.SC)(),[g]=(null==t?void 0:t.split("-"))||[],b=function(e,t){let n=e;return"left"===e?n=t?"end":"start":"right"===e&&(n=t?"start":"end"),n}(g,v);return(0,u.jsxs)("div",{ref:m,role:"tooltip",style:r,"x-placement":g,className:o()(n,h,g&&`bs-popover-${b}`),...p,children:[(0,u.jsx)("div",{className:"popover-arrow",...c}),s?(0,u.jsx)(l,{children:i}):i]})}));d.defaultProps={placement:"right"};var p=Object.assign(d,{Header:c,Body:l,POPPER_OFFSET:[0,8]})},2473:function(e){var t,n=function(e,t){var n=arguments.length;t=new Array(n>1?n-1:0);for(var r=1;r<n;r++)t[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return t[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};t=function(e,t,r){var o=arguments.length;r=new Array(o>2?o-2:0);for(var i=2;i<o;i++)r[i-2]=arguments[i];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");e||n.apply(null,[t].concat(r))},e.exports=t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,